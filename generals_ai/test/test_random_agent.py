import unittest
import sys
import os
sys.path.append(os.path.abspath('../'))
from random_agent import RandomAgent

class TestRandomAgent(unittest.TestCase):

    def setUp(self):
        self.agent = RandomAgent()

    def tearDown(self):
        pass
    
    def test_patch(self):
        self.assertEqual(self.agent.patch([],[0,2,3,4]), [3,4])
        self.assertEqual(self.agent.patch([1,2,3],[2,2,3,4]), [1,2,3,4])
        self.assertEqual(self.agent.patch([1,2,10,10,5],[2,2,3,4,1,2,6,7]), [1,2,3,4,5,6,7])
        original_map = [22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -4, -3, -3, -3, -3, -3, -4, -4, -3, -3, -3, -4, -3, -4, -3, -3, -4, -4, -4, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -4, -3, -3, -3, -3, -4, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -4, -3, -3, -4, -3, -3, -3, -4, -3, -3, -3, -3, -4, -4, -3, -3, -4, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -4, -3, -3, -4, -3, -3, -3, -4, -4, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -4, -3, -3, -4, -3, -4, -3, -3, -3, -3, -3, -4, -3, -3, -4, -4, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3, -4, -3, -3, -3, -4, -4, -4, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -4, -3, -3, -4, -3, -3, -4, -3, -4, -4, -4, -3, -4, -3, -3, -4, -4, -3, -3, -3, -3, -3, -3, -3, -4, -4, -3, -4, -3, -3, -3, -3, -4, -3, -3, -3, -3, -4, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -4, -4, -3, -4, -4, -3, -3, -4, -3, -4, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -4, -3, -3, -3, -4, -3, -3, -4, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -4, -3, -4, -3, -4, -4, -3, -3, -3, -3, -3, -3, -4, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3, -4, -4, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -4, -4, -3, -3, -3, -3, -3, -4, -4, -3, -3, -3, -3, -3, -4, -4, -3, -3, -3, -3, -3, -4, -4, -3, -3, -4, -4, -3, -3, -3, -4, -3, -4, -4, -3, -4, -3, -4, -3, -4, -4, -3, -4, -3, -4, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -4, -1, -1, -1, -3, -4, -3, -3, -3, -3, -3, -4, -4, -3, -4, -3, -4, -4, -3, -3, -4, -3, -3, -1, 1, -1, -3, -4, -4, -3, -3, -3, -3, -4, -3, -3, -4, -4, -3, -3]
        diff = [470, 1, 2, 499]
        new_map = [22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -4, -3, -3, -3, -3, -3, -4, -4, -3, -3, -3, -4, -3, -4, -3, -3, -4, -4, -4, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -4, -3, -3, -3, -3, -4, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -4, -3, -3, -4, -3, -3, -3, -4, -3, -3, -3, -3, -4, -4, -3, -3, -4, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -4, -3, -3, -4, -3, -3, -3, -4, -4, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -4, -3, -3, -4, -3, -4, -3, -3, -3, -3, -3, -4, -3, -3, -4, -4, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3, -4, -3, -3, -3, -4, -4, -4, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -4, -3, -3, -4, -3, -3, -4, -3, -4, -4, -4, -3, -4, -3, -3, -4, -4, -3, -3, -3, -3, -3, -3, -3, -4, -4, -3, -4, -3, -3, -3, -3, -4, -3, -3, -3, -3, -4, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -4, -4, -3, -4, -4, -3, -3, -4, -3, -4, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -4, -3, -3, -3, -4, -3, -3, -4, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -4, -3, -4, -3, -4, -4, -3, -3, -3, -3, -3, -3, -4, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3, -4, -4, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -4, -4, -3, -3, -3, -3, -3, -4, -4, -3, -3, -3, -3, -3, -4, -4, -3, -3, -3, -3, -3, -4, -4, -3, -3, -4, -4, -3, -3, -3, -4, -3, -4, -4, -3, -4, -3, -4, -3, -4, -4, -3, -4, -3, -4, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -4, -1, -1, -1, -3, -4, -3, -3, -3, -3, -3, -4, -4, -3, -4, -3, -4, -4, -3, -3, -4, -3, -3, -1, 1, -1, -3, -4, -4, -3, -3, -3, -3, -4, -3, -3, -4, -4, -3, -3]
        self.assertEqual(self.agent.patch(original_map, diff), new_map)
    
if __name__ == '__main__':
    unittest.main()